{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#test","title":"test","text":"<pre><code>ok test auto publish again\n</code></pre>"},{"location":"Fixing%20Errors/","title":"Fixing Errors","text":"<p>This section will go over some basics on how to fix or find errors</p>"},{"location":"Fixing%20Errors/#checking-output","title":"Checking Output","text":"<p>Usually, if your code doesn't run then it might be because the code has errored.</p> <p>To open output you go to View -&gt; Output</p> <p></p> <p>Another useful tool is the Script Analysis, what it does is show warnings/errors  (mainly syntax related) while you are editing the script. It is directly below the Output</p> <p>To see if there is an error you will see a message that is red like this one</p> <p></p> <p>You can click on the error and it will bring you to the line and script that it errored on </p> <p>If clicking on it doesn't lead you anywhere and you see this </p> <p> When you hover over it it means that the script it errored in was deleted. What you can do is click on the error while in the game instead of after stopping and it should lead you to the right script.</p>"},{"location":"Fixing%20Errors/#reading-errors-messages","title":"Reading errors messages","text":"<p>Time of message:  When did it error Script Location:  What script did it error on and where is the script Line the error is on:  What line did it error on Error Message:  What is the error Environment:  is the error on the server, client, or studio</p> <p>You mainly only need to focus on the Script Location, error line, and the error itself. If it's an error you don't understand you can use Google to search for the error message. There is a section below explaining how to do that.</p>"},{"location":"Fixing%20Errors/#common-error-messages","title":"Common Error Messages","text":""},{"location":"Fixing%20Errors/#name-is-not-a-valid-member-of-object","title":"[name] is not a valid member of object","text":"<p>This error shows up when you try to get a child that does not exist in the object, Usually if its to do with the client you can use WaitForChild but if that doesn't work, check your code and make sure the child exists.  </p>"},{"location":"Fixing%20Errors/#attempt-to-perform-arithmeticarithmetic-on-number-and-type","title":"attempt to perform arithmetic(arithmetic) on number and [type]","text":"<p>This means you are trying to do arithmetic on a number and a type you can not do arithmetic on.  The only objects you can do arithmetic on are numbers, strings, and objects that have arithmetic metamethods (__mul,__add...)</p> <p>Warning</p> <p>This also applies to  attempt to compare something &lt; number  and  attempt to concatenate string with something . They either must be types that be compared on concatenated or have the metatmethods that allow them to do it</p>"},{"location":"Fixing%20Errors/#argument-number-missing-or-nil","title":"Argument [number] missing or nil","text":"<p>This means that one of the arguments you sent is nil or empty. arguments are the data you are sending ex. <pre><code>local function f(x) -- x is a parameter\n    ...\nend\nf(y) -- y is an argument\n</code></pre> to fix this make sure that the argument is being defined correctly or is the right type</p>"},{"location":"Fixing%20Errors/#unable-to-cast-value-to-object","title":"Unable to cast value to Object","text":"<p>this means that the value you are trying to send cannot be converted into the object the function wants. To fix this make sure that the data type is the correct one.</p>"},{"location":"Fixing%20Errors/#expected-to-close-at-column-number-got-eof","title":"Expected ')' (to close '(' at column [number]), got eof","text":"<p>This is a syntax error. it means that you either have extra parentheses or lack one. To fix this look for where the lines are underlined in red as roblox catches syntax errors before the game is being run.</p>"},{"location":"Fixing%20Errors/#print-debugging","title":"Print Debugging","text":"<p>Print debugging mainly consists of adding print statements to find out what is wrong this is mainly used if no errors are showing up in the output</p>"},{"location":"Fixing%20Errors/#use-case","title":"use case","text":"<p>let's say we have a script set up like this <pre><code>local x = getX()\nlocal y = getY()\nif x &gt;= 3 then\n    if y == 0 then\n        doSomething()\n    end\nend\n</code></pre> and for some reason doSomething() is not being invoked, instead of going to scripting help and asking why the doSomething isn't working here is what you can do.</p> <ol> <li>Print before an if statement  <pre><code>local x = getX()\nlocal y = getY()\nprint(\"script is running\")\nif x &gt;= 3 then\n   print(\"x check passed\")\n    if y == 0 then\n       print(\"y check passed\")\n        doSomething()\n    end\nend\n</code></pre> When you run the script and you only see  <pre><code>script is running\nx check passed\n</code></pre> Then you will know that y is not equal to 0</li> </ol> <p>!!!      You don't really need to add all those prints to figure out what's wrong for example if you know your code is running you can probably remove the print(\"script is running\").     You also can just print(\"X\") (or anything that will help) instead of print(\"x check passed\") 2. Printing the variables</p> <p><pre><code>local x = getX()\nlocal y = getY()\nprint(x)\nif x &gt;= 3 then\n    print(y)\n    if y == 0 then\n        doSomething()\n    end\nend\n</code></pre> <pre><code>4\n4\n</code></pre> From this, you can tell that y is 4 not 0 so from this you would most likely look into how y is being assigned which in this case can tell us that something must be wrong with the getY function </p>"},{"location":"Fixing%20Errors/#visualize-debugging","title":"visualize debugging","text":"<p>This type of debugging can be using parts or other methods to visualize the problem this can be used if using prints doesn't really tell you what's wrong </p>"},{"location":"Fixing%20Errors/#use-case_1","title":"use case","text":"<p>Let's say we are doing some raycasting but the ray isn't hitting anything  <pre><code>local green = workspace.PartA\nlocal red = workspace.PartB\nlocal direction = (green.Position-red.Position).Unit*20\n\nlocal ray = workspace:Raycast(green.Position,direction)\nprint(ray)\nprint(direction)\n</code></pre></p> <p> <pre><code>nil\n600.8695068359375, -531.7534790039062, -596.8199462890625\n</code></pre></p> <p>For beginners, you might not see anything wrong with the script and looking at what direction is doesn't really help so what you can do here is create a part that goes in that ray direction like this</p> <pre><code>local green = workspace.PartA\nlocal red = workspace.PartB\nlocal direction = (green.Position-red.Position).Unit*20\n\nlocal ray = workspace:Raycast(green.Position,direction)\nprint(ray)\n\nlocal dir = Instance.new('Part')\ndir.Size = Vector3.new(.2,.2,20)\ndir.CFrame = CFrame.lookAt(green.Position+direction/2,green.Position + direction)\ndir.Anchored = true\ndir.Parent = workspace\n</code></pre> <p> From this we can see that direction is indeed wrong and when we look at how direction is defined we can see that we did (start-goal) when the proper way is (goal - start)</p> <p>So fixing that and running the code will now give the correct results <pre><code>local green = workspace.PartA\nlocal red = workspace.PartB\nlocal direction = (red.Position-green.Position).Unit*20\n\nlocal ray = workspace:Raycast(green.Position,direction)\nprint(ray)\n\nlocal dir = Instance.new('Part')\ndir.Size = Vector3.new(.2,.2,20)\ndir.CFrame = CFrame.lookAt(green.Position+direction/2,green.Position + direction)\ndir.Anchored = true\ndir.Parent = workspace\n</code></pre> <pre><code>RaycastResult{PartB @ -4.82407379, 11.2030563, 18.3839722; normal = 0, 0, -1; material = Plastic} \n</code></pre></p> <p></p>"},{"location":"Fixing%20Errors/#making-your-code-more-readable-remaking-it","title":"Making your code more readable/ Remaking it","text":"<p>Sometimes making your code more readable will help with debugging  ex: given this script it might be a bit annoying to figure out what wrong </p> <p><pre><code>--GOAL: to make the ProximityPrompt enabled set to true if both the flags for\n-- randomTor and LocalTorso is false, otherwise true\nif RandomTor:FindFirstChild(\"Flag\").Value == false then\n    if LocalTorso:FindFirstChild(\"Flag\").Value == false then\n        RandomTor:FindFirstChild(\"ProximityPrompt\").Enabled = true\n    else\n        RandomTor:FindFirstChild(\"ProximityPrompt\").Enabled = false\n    end\nend\n</code></pre> What we can do is use variables to make it cleaner <pre><code>local randomFlag = RandomTor:FindFirstChild(\"Flag\")\nlocal LocalFlag = LocalTorso:FindFirstChild(\"Flag\")\nlocal RandomProx = RandomTor:FindFirstChild(\"ProximityPrompt\")\nif not randomFlag.Value then\n    if not LocalFlag.Value then\n       RandomProx.Enabled = true\n    else\n       RandomProx.Enabled = false\n    end\nend\n</code></pre> If you still don't see what's wrong with it what you can do is just plug values into it and think what the expected results are. The reason this isn't working is because it ignores when randomFlag.Value is true so to fix this we can do: <pre><code>local randomFlag = RandomTor:FindFirstChild(\"Flag\")\nlocal LocalFlag = LocalTorso:FindFirstChild(\"Flag\")\nlocal RandomProx = RandomTor:FindFirstChild(\"ProximityPrompt\")\nif (not randomFlag.Value) and (not LocalFlag.Value) then \n    RandomProx.Enabled = true\nelse\n    RandomProx.Enabled = false\nend\n</code></pre></p> <p>Info</p> <p>For people that really care how much lines their code has you can do <pre><code>local randomFlag = RandomTor:FindFirstChild(\"Flag\")\nlocal LocalFlag = LocalTorso:FindFirstChild(\"Flag\")\nlocal RandomProx = RandomTor:FindFirstChild(\"ProximityPrompt\")\nRandomProx.Enabled =  (not randomFlag.Value) and (not LocalFlag.Value)\n</code></pre> as the condition is just a boolean </p>"},{"location":"Fixing%20Errors/#using-google","title":"Using google","text":"<p>When you get an error message that you don't know or understand, what you can do is go to google.com and search for the error message. Usually, you will find a devform post that has the same error and the solution. Another way to help enhance the search is by using \"\". This tells google to look for that keyword. Sometimes you might not get the results you're looking for, for example, this error</p> <p></p> <p>and when we do a Google search we don't get anything that relates to that</p> <p></p> <p>So what we can do here is maybe change the wording or adding roblox into the search to help Google search better</p> <p></p> <p>and there we go.</p>"},{"location":"Fixing%20Errors/#using-roblox-debugger","title":"Using roblox debugger","text":"<p>Another way of debugging is using tools roblox provided such as breakpoints, watch, and call stack. But most of the time you won't really be needing this. but if you want you can find out how to use them here.</p>"},{"location":"Fixing%20Errors/#common-mistakes","title":"Common mistakes","text":"<p>This section is just a list of common mistakes people tend to do</p>"},{"location":"Fixing%20Errors/#1-using-starter-gui-instead-of-playergui","title":"1. Using starter Gui instead of playergui","text":""},{"location":"Fixing%20Errors/#startergui","title":"StarterGui","text":"<p>StarterGui is a container that is under Game. Its purpose is to act like a container to hold your guis before they are cloned into the PlayerGui. When a player joins roblox will take everything that is currently in StarterGui and clone them into the players PlayerGui. https://create.roblox.com/docs/reference/engine/classes/StarterGui</p> <p>So given a script like the one below, it will not make ScreenGui visible because it is modifying a ScreenGui in StarterGui  <code>lua  --LocalScript local StarterGui = game.StarterGui  local ScreenGui = StarterGui:WaitForChild(\"ScreenGui\") ScreenGui.Enabled = true --!! THIS WILL NOT WORK !!</code></p>"},{"location":"Fixing%20Errors/#playergui","title":"PlayerGui","text":"<p>PlayerGui is a container that is under the player that joined. Each player will have their own PlayerGui which other players will not be able to see. The server will be able to see it but its is not recommended to let the server modify anything in PlayerGui. PlayerGui is what the client actually sees. https://create.roblox.com/docs/reference/engine/classes/PlayerGui</p> <p></p> <p>so to fix the given script above we can do this</p> <p><code>lua  --LocalScript local player = game.Players local LocalPlayer = player.LocalPlayer local PlayerGui = LocalPlayer.PlayerGui local ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\") ScreenGui.Enabled = true</code></p> <p>### 2. LocalScripts in the wrong places Another common mistake is having LocalScripts in the wrong place such as having a LocalScript in ServerScriptService. LocalScripts run in a client environment such as StarterPlayerScripts, ServerScriptService is on the server</p> <p> https://create.roblox.com/docs/reference/engine/classes/LocalScript</p>"},{"location":"Fixing%20Errors/#3-trying-to-access-serverstorage-from-the-client","title":"3. Trying to access ServerStorage from the client","text":"<p>ServerStorage is a Storage for the server to see not the client. If you want to store something store it in ReplicatedStorage</p>"},{"location":"Fixing%20Errors/#4-indirect-change","title":"4. Indirect Change","text":"<p>Indirect Change is when you are changing the variable, not the actual value, for example:</p> <p><pre><code>local t = {}\nt.Value = 1\nlocal value = t.Value\nvalue = 5\nprint(t.Value) --&gt; 1\nprint(value) --&gt;5\n\n--another example:\n\nlocal part = workspace.Part\nlocal position = part.Position\n\nposition = Vector3.new(1,2,3)\n-- this is wrong\n</code></pre> The example above is wrong because you are not changing the values but instead the variable.</p> <p>the proper way to do this is to do: <pre><code>local t = {}\nt.Value = 1\nt.Value = 5\nprint(t.Value) --&gt; 5\n\n--another example:\n\nlocal part = workspace.Part\npart.Position = Vector3.new(1,2,3)\n</code></pre></p>"},{"location":"Fixing%20Errors/#5-not-having-a-bindtoclose-in-their-datastoresaving-script","title":"5. Not having a BindToClose in their DataStoreSaving script","text":"<p>A very common mistake people tend to make is not having a BindToClose in their Datastore script</p> <p>Here is an example script: <pre><code>local dss =game:GetService(\"DataStoreService\")\nlocal MyDs = dss:GetDataStore(\"MyStore\")\n\nlocal function save(player)\n    MyDs:SetAsync(player.UserId,\"your data\")\nend\n\ngame.Players.PlayerRemoving(save)\n</code></pre> This will work, but will only work sometimes, this is because when the last person leaves roblox doesn't care if a script is still running or not. To fix this you can use a BindToClose. What a BindToClose does is it forces roblox's server or studio to wait until the function inside of it is done running (30 seconds max) then tell the server to close.</p> <p>Heres is how we can implement it: <pre><code>local dss =game:GetService(\"DataStoreService\")\nlocal MyDs = dss:GetDataStore(\"MyStore\")\n\nlocal function save(player)\n    MyDs:SetAsync(player.UserId,\"your data\")\nend\n\ngame.Players.PlayerRemoving(save)\n\ngame:BindToClose(function()\n    for _,Player in game.Players:GetPlayers() do\n        save(Player)\n    end\nend)\n</code></pre></p> <p>Warning</p> <p>Another mistake people tend to do is using spawn/task.spawn inside of the BindToClose <pre><code>game:BindToClose(function()\n    for _,Player in game.Players:GetPlayers() do\n        task.spawn(save,Player)\n    end\nend)\n</code></pre> this is wrong because task.spawn makes it so that the saving process doesn't yield, but we need it to yield. If you want to do it correctly you can do it like this <pre><code>game:BindToClose(function()\n    local players = game.Players:GetPlayers()\n    local amt = #players -- how many players need to be saved\n    local count = 0 -- how many players have been saved\n    for _,Player in players do\n        task.spawn(function() \n        -- makes it so that everyone saves at the same time instead of 1 by 1\n            save(Player)\n            count += 1\n            -- when player is done saving increase\n        end)\n    end\n    repeat task.wait() until count == amt -- yields until everything is done\nend)\n</code></pre> or if you want to be fancy <pre><code>game:BindToClose(function()\n    local players = game.Players:GetPlayers()\n    local thread = coroutine.running() --gets current thread\n    local amt = #players -- how many players needs to be saved\n    local count = 0 -- how many players has been saved\n    for _,Player in players do\n        task.spawn(function()\n        -- makes it so that everyone save at the same time instead of 1 by 1\n            save(Player)\n            count += 1\n            -- When player is done saving increase\n            if count == amt then\n                coroutine.resume(thread)\n                -- if it's the last player, resume the thread\n            end\n        end)\n    end\n    if count == amt then return end -- if everyone's data has already been saved there is no need to yield\n    coroutine.yield() -- yields the thread\nend)\n</code></pre></p>"},{"location":"Fixing%20Errors/#6-animations-working-in-studio-but-not-in-game","title":"6. Animations working in Studio but not In game","text":"<p>Animations only work if the game the animation is owned is the same to fix it you will have to upload the animation to the same game owner or group </p> <p> (The green is what will happen)</p>"},{"location":"Fixing%20Errors/#conclusion","title":"Conclusion","text":"<p>Hope this helps if you have any more questions you can ask in scripting-help. Anyways Good luck out there and don't get joe tagged.</p> <p></p>"}]}